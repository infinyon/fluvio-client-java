/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
}

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:29.0-jre'
}

test {
    systemProperty "java.library.path", file("${buildDir}/libs/shared").absolutePath
    dependsOn cleanTest
}

// app/build.gradle
def rustBasePath = ".."

// execute cargo metadata and get path to target directory
tasks.create(name: "cargo-output-dir", description: "Get cargo metadata") {
    new ByteArrayOutputStream().withStream { os ->
        exec {
            commandLine 'cargo', 'metadata', '--format-version', '1'
                workingDir rustBasePath
                standardOutput = os
        }
        def outputAsString = os.toString()
            def json = new groovy.json.JsonSlurper().parseText(outputAsString)

            logger.info("cargo target directory: ${json.target_directory}")
            project.ext.cargo_target_directory = json.target_directory
    }
}
// Build with cargo
tasks.create(name: "cargo-build", type: Exec, description: "Running Cargo build", dependsOn: "cargo-output-dir") {
    workingDir rustBasePath
        commandLine 'cargo', 'build', '--release'
}
// Copy build libs into this app's libs directory
tasks.create(name: "rust-deploy", type: Copy, dependsOn: "cargo-build", description: "Copy rust libs to jniLibs") {
    from "${project.ext.cargo_target_directory}/release"
        include "*.dylib","*.so"
        into "${buildDir}/libs/shared/"
}

// Hook up tasks to execute before building java
tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn "rust-deploy"
}

// Hook up clean tasks
tasks.create(name: "clean-rust", type: Delete, description: "Deleting built libs", dependsOn: "cargo-output-dir") {
    delete fileTree("${project.ext.cargo_target_directory}/release") {
        include '*.so'
    }
}
clean.dependsOn "clean-rust"
