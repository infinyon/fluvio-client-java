/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'

    // https://docs.gradle.org/current/userguide/publishing_maven.html
    id 'maven-publish'

    // https://docs.gradle.org/current/userguide/signing_plugin.html
    id 'signing'

    // https://docs.gradle.org/current/userguide/checkstyle_plugin.html
    id 'checkstyle'
}

checkstyle {
  ignoreFailures = false
  maxWarnings = 0
  configFile file('../config/checkstyle/checkstyle-8.37.xml');
  toolVersion '8.37';
}

group 'com.infinyon'
version '0.12.16-SNAPSHOT'

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
}

sourceSets {
    main {
        resources {
            srcDir 'libs'
        }
    }
}

dependencies {
    // Use JUnit test framework.
    testImplementation platform('org.junit:junit-bom:5.10.3')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'
}

test {
    dependsOn cleanTest
    useJUnitPlatform()
}

// app/build.gradle
def rustBasePath = ".."

// execute cargo metadata and get path to target directory
tasks.create(name: "cargo-output-dir", description: "Get cargo metadata") {
    new ByteArrayOutputStream().withStream { os ->
        exec {
            commandLine 'cargo', 'metadata', '--format-version', '1'
            workingDir rustBasePath
            standardOutput = os
        }
        def outputAsString = os.toString()
        def json = new groovy.json.JsonSlurper().parseText(outputAsString)

        logger.info("cargo target directory: ${json.target_directory}")
        project.ext.cargo_target_directory = json.target_directory
    }
}
// Build with cargo
tasks.create(name: "cargo-build", type: Exec, description: "Running Cargo build", dependsOn: "cargo-output-dir") {
    workingDir rustBasePath
    commandLine 'cargo', 'build', '--release'
}

tasks.create(name: "rust-deploy", type: Copy, dependsOn: "cargo-build") {
    from "${project.ext.cargo_target_directory}/release"
    include "*.dylib","*.so"
    into "libs/"
}

// Hook up tasks to execute before building java
tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn "rust-deploy"
}

// Hook up clean tasks
tasks.create(name: "clean-rust", type: Delete, description: "Deleting built libs", dependsOn: "cargo-output-dir") {
    delete fileTree("${project.ext.cargo_target_directory}/release") {
        include "*.dylib","*.so"
    }
}
clean.dependsOn "clean-rust"

java {
    withJavadocJar()
    withSourcesJar()
}


publishing {
    repositories {
        maven {
            def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            def release = project.hasProperty('release');
            def snapshot_version = version.endsWith('SNAPSHOT');
            if (release == snapshot_version) {
                throw new IllegalStateException("Only non-snapshot versions can be released.");
            }
            url = snapshot_version ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
    publications {
        maven(MavenPublication) {
            from(components.java)
            artifactId 'fluvio'
            pom {
                name = 'Fluvio Client for Java'
                description = 'Java binding for Fluvio streaming platform'
                url = 'https://github.com/infinyon/fluvio-client-java'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        name = 'Fluvio Contributors'
                        email = 'team@fluvio.io'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/infinyon/fluvio-client-java.git'
                    developerConnection = 'scm:git:ssh://github.com/infinyon/fluvio-client-java.git'
                    url = 'https://github.com/infinyon/fluvio-client-java.git'
                }
            }
        }
    }
}

signing {
    def signingKey = System.getenv("MAVEN_GPG_PRIVATE_KEY")
    def signingPassword = System.getenv("MAVEN_GPG_PASSPHRASE")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.maven
}
