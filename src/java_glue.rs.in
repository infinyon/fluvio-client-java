use fluvio::{
    Fluvio,
    PartitionConsumer,
    TopicProducer,
    FluvioError,
    Offset,
    consumer::Record,
};
use fluvio_future::{
    task::run_block_on,
    io::{
        Stream,
        StreamExt,
    },
};
use std::pin::Pin;
use crate::jni_c_header::*;

fn fluvio_error_to_string(e: FluvioError) -> String {
    format!("{:?}", e)
}

#[allow(non_snake_case)]
mod _Fluvio {
    use super::*;
    pub fn connect() -> Result<Fluvio, String> {// TODO: Return result type
        run_block_on(Fluvio::connect()).map_err(fluvio_error_to_string)
    }
    pub fn partition_consumer(
        fluvio: &Fluvio,
        topic: String,
        partition: i32
    ) -> Result<PartitionConsumer, String> {
        run_block_on(fluvio.partition_consumer(topic, partition)).map_err(fluvio_error_to_string)
    }
    pub fn topic_producer(
        fluvio: &Fluvio,
        topic: String,
    ) -> Result<TopicProducer, String> {
        run_block_on(fluvio.topic_producer(topic)).map_err(fluvio_error_to_string)
    }
}

foreign_class!(class Fluvio {
    self_type Fluvio;
    private constructor = empty;
    fn _Fluvio::connect() -> Result<Fluvio, String>;
    fn _Fluvio::partition_consumer(
        &self,
        _: String,
        _ : i32
    ) -> Result<PartitionConsumer, String>;
    fn _Fluvio::topic_producer(
        &self,
        _: String
    ) -> Result<TopicProducer, String>;
    // https://github.com/Dushistov/flapigen-rs/issues/253#issuecomment-515672499
    foreign_code r#"
    static {
        try {
            NativeUtils.loadLibraryFromJar();
        } catch (java.io.IOException e) {
            e.printStackTrace();
        }
    }
"#;
});


#[allow(non_snake_case)]
mod _PartitionConsumer {
    use super::*;
    pub fn stream(
        consumer: &PartitionConsumer,
        offset: &Offset,
    ) -> Result<PartitionConsumerStream, String> {
        Ok(PartitionConsumerStream {
            inner: Box::pin(run_block_on(
               consumer.stream(offset.clone())
            ).map_err(fluvio_error_to_string)?)
        })
    }
}
foreign_class!(class PartitionConsumer {
    self_type PartitionConsumer;
    private constructor = empty;
    fn _PartitionConsumer::stream(
        &self, _: &Offset,
    ) -> Result<PartitionConsumerStream, String>;
});

type PartitionConsumerIteratorInner =
    Pin<Box<dyn Stream<Item = Result<Record, FluvioError>> + Send>>;

pub struct PartitionConsumerStream {
    pub inner: PartitionConsumerIteratorInner,
}
impl PartitionConsumerStream {
    pub fn next(&mut self) -> Result<Record, String> {
        if let Some(res) = run_block_on(self.inner.next()) {
            res.map_err(fluvio_error_to_string)
        } else {
            Err(String::from("Stream ended"))
        }
    }
}

foreign_class!(class PartitionConsumerStream{
    self_type PartitionConsumerStream;
    private constructor = empty;
    fn PartitionConsumerStream::next(
        &mut self
    ) -> Result<Record, String>;
});
foreign_class!(class FluvioError {
    self_type FluvioError;
    private constructor = empty;
});

#[allow(non_snake_case)]
mod _TopicProducer {
    use super::*;
    pub fn send_record(
        producer: &TopicProducer,
        buffer: &[u8],
        partition: i32,
    ) -> Result<(), String> {
        run_block_on(producer.send_record(buffer, partition)).map_err(fluvio_error_to_string)
    }
    pub fn send(
        producer: &TopicProducer,
        key: &[u8],
        value: &[u8],
    ) -> Result<(), String> {
        run_block_on(producer.send(key, value)).map_err(fluvio_error_to_string)
    }
}
foreign_class!(class TopicProducer {
    self_type TopicProducer;
    private constructor = empty;
    fn _TopicProducer::send_record(
        &self,
        _: &[u8],
        _ : i32
    ) -> Result<(), String>;
    fn _TopicProducer::send(
        &self,
        _: &[u8],
        _ : &[u8]
    ) -> Result<(), String>;
});


#[allow(non_snake_case)]
mod _Record {
    use super::*;
    pub fn value_string(record: &Record) -> Result<String, String> {
        String::from_utf8(record.value().to_vec()).map_err(|_| String::from("Utf8Error"))
    }
    pub fn key_string(
        record: &Record
    ) -> Result<String, String> {
        if let Some(key) = record.key() {
            String::from_utf8(key.to_vec()).map_err(|_| String::from("Utf8Error"))
        } else {
            Ok(String::new())
        }
    }
    pub fn key(record: &Record) -> &[u8] {
        if let Some(record) = record.key() {
            record
        } else {
            &[]
        }
    }
}

foreign_class!(class Record {
    self_type Record;
    private constructor = empty;
    fn Record::offset(&self) -> i64;
    fn Record::value(&self) -> &[u8];
    fn _Record::key(&self) -> &[u8];
    fn _Record::value_string(&self) -> Result<String, String>;
    fn _Record::key_string(&self) -> Result<String, String>;
});

#[allow(non_snake_case)]
mod _Offset {
    use super::*;
    pub fn absolute(offset: i64) -> Result<Offset, String> {
        Offset::absolute(offset).map_err(fluvio_error_to_string)
    }
}

foreign_class!(class Offset {
    self_type Offset;
    private constructor = empty;
    fn _Offset::absolute(_ :i64) -> Result<Offset, String>;
    fn Offset::beginning() -> Offset;
    fn Offset::from_beginning(_: u32) -> Offset;
    fn Offset::end() -> Offset;
    fn Offset::from_end(_: u32) -> Offset;
});

// Not sure how I feel about this but:
// https://github.com/Dushistov/flapigen-rs/issues/143#issuecomment-664131615
foreign_typemap!(
    ($p:r_type) Vec<u8> => jbyteArray {
        let slice = &($p)[..];
        let slice = unsafe { std::mem::transmute::<&[u8], &[i8]>(slice) };
        let raw = JavaByteArray::from_slice_to_raw(slice, env);
        $out = raw;
    };
    ($p:f_type) => "jbyteArray";
);

foreign_typemap!(
    ($p:r_type) &'a [u8] => jbyteArray {
        let slice = unsafe { std::mem::transmute::<&[u8], &[i8]>($p) };
        let raw = JavaByteArray::from_slice_to_raw(slice, env);
        $out = raw;
    };
    ($p:f_type) => "jbyteArray";
    ($p:r_type) &'a [u8] <= jbyteArray {
        let arr = JavaByteArray::new(env, $p);
        let slice = arr.to_slice();
        let slice = unsafe { std::mem::transmute::<&[i8], &[u8]>(slice) };
        $out = slice;
    };
    ($p:f_type) <= "jbyteArray";
);
