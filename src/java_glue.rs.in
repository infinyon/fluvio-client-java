use fluvio::{
    Fluvio,
    PartitionConsumer,
    TopicProducer,
    FluvioError,
    dataplane::ErrorCode,
    Offset,
    consumer::Record,
};
use fluvio_future::{
    task::run_block_on,
    io::{
        Stream,
        StreamExt,
    },
};
use std::pin::Pin;
use crate::jni_c_header::*;

fn fluvio_error_to_string(e: FluvioError) -> String {
    format!("{:?}", e)
}

#[allow(non_snake_case)]
mod _Fluvio {
    use super::*;
    pub fn connect() -> Result<Fluvio, String> {// TODO: Return result type
        run_block_on(Fluvio::connect()).map_err(fluvio_error_to_string)
    }
    pub fn partition_consumer(
        fluvio: &Fluvio,
        topic: String,
        partition: i32
    ) -> Result<PartitionConsumer, String> {
        run_block_on(fluvio.partition_consumer(topic, partition)).map_err(fluvio_error_to_string)
    }
    pub fn topic_producer(
        fluvio: &Fluvio,
        topic: String,
    ) -> Result<TopicProducer, String> {
        run_block_on(fluvio.topic_producer(topic)).map_err(fluvio_error_to_string)
    }
}

foreign_class!(
    /// <p>The Fluvio Java client for interacting with Fluvio streams from Java.</p>
    ///
    /// <p>
    /// The Fluvio class does not provide a public constructor, instead it provides
    /// a static function that first connects to the target cluster and then returns
    /// a Fluvio object, representing a successfully-opened connection. If Fluvio
    /// fails to connect to a cluster, an exception will be thrown instead.
    /// </p>
    ///
    /// {@code
    /// Fluvio fluvio = new Fluvio();
    /// }
    ///
    /// <p>
    /// The cluster that the client connects to is determined by the active profile
    /// configured by the Fluvio CLI. Make sure you have
    /// <a href="https://fluvio.io/docs/getting-started/">followed the getting started guide</a>
    /// and used the CLI to successfully connect to a running cluster, either on
    /// <a href="https://cloud.fluvio.io/signup">Fluvio Cloud</a>
    /// or running locally.
    /// </p>
    ///
    /// <p>
    /// Once a Fluvio object is created, it may be used to obtain a {@link TopicProducer}
    /// or a {@link PartitionConsumer}, which may be used to send and receive records,
    /// respectively.
    /// </p>
    ///
    class Fluvio {
        self_type Fluvio;
        private constructor = empty;

        /// Connect to a Fluvio cluster and return a {@link Fluvio} object on success.
        fn _Fluvio::connect() -> Result<Fluvio, String>;

        /// Create a {@link PartitionConsumer} that consumes records from the specified
        /// topic and partition.
        fn _Fluvio::partition_consumer(
            &self,
            topic: String,
            partition: i32
        ) -> Result<PartitionConsumer, String>;

        /// Create a {@link TopicProducer} which produces records to the specified topic.
        fn _Fluvio::topic_producer(
            &self,
            topic: String
        ) -> Result<TopicProducer, String>;

        // https://github.com/Dushistov/flapigen-rs/issues/253#issuecomment-515672499
        foreign_code r#"
        static {
            try {
                NativeUtils.loadLibraryFromJar();
            } catch (java.io.IOException e) {
                e.printStackTrace();
            }
        }"#;
    }
);


#[allow(non_snake_case)]
mod _PartitionConsumer {
    use super::*;
    pub fn stream(
        consumer: &PartitionConsumer,
        offset: &Offset,
    ) -> Result<PartitionConsumerStream, String> {
        Ok(PartitionConsumerStream {
            inner: Box::pin(run_block_on(
               consumer.stream(offset.clone())
            ).map_err(|e| format!("{:?}", e))?)
        })
    }
}
foreign_class!(
    /// <p>Create streams to read records from specific Fluvio topics and partitions.</p>
    class PartitionConsumer {
        self_type PartitionConsumer;
        private constructor = empty;

        /// Create a stream to read records beginning at the given {@link Offset}
        fn _PartitionConsumer::stream(
            &self,
            offset: &Offset,
        ) -> Result<PartitionConsumerStream, String>;
    }
);

type PartitionConsumerIteratorInner =
    Pin<Box<dyn Stream<Item = Result<Record, ErrorCode>> + Send>>;

pub struct PartitionConsumerStream {
    pub inner: PartitionConsumerIteratorInner,
}
impl PartitionConsumerStream {
    pub fn next(&mut self) -> Result<Record, String> {
        if let Some(res) = run_block_on(self.inner.next()) {
            res.map_err(|e| format!("{:?}", e))
        } else {
            Err(String::from("Stream ended"))
        }
    }
}

foreign_class!(
    /// A stream that yields records from the origin topic and partition, starting at the given offset.
    class PartitionConsumerStream{
        self_type PartitionConsumerStream;
        private constructor = empty;
        fn PartitionConsumerStream::next(
            &mut self
        ) -> Result<Record, String>;
    }
);
foreign_class!(class FluvioError {
    self_type FluvioError;
    private constructor = empty;
});

#[allow(non_snake_case)]
mod _TopicProducer {
    use super::*;
    pub fn send(
        producer: &TopicProducer,
        key: &[u8],
        value: &[u8],
    ) -> Result<(), String> {
        run_block_on(producer.send(key, value)).map_err(fluvio_error_to_string).map(|_| ())
    }
}
foreign_class!(
    /// <p>Sends records to a particular topic.</p>
    class TopicProducer {
        self_type TopicProducer;
        private constructor = empty;

        /// Send a key/value record to this topic.
        fn _TopicProducer::send(
            &self,
            key: &[u8],
            value: &[u8]
        ) -> Result<(), String>;
    }
);


#[allow(non_snake_case)]
mod _Record {
    use super::*;
    pub fn value_string(record: &Record) -> Result<String, String> {
        String::from_utf8(record.value().to_vec()).map_err(|_| String::from("Utf8Error"))
    }
    pub fn key_string(
        record: &Record
    ) -> Result<String, String> {
        if let Some(key) = record.key() {
            String::from_utf8(key.to_vec()).map_err(|_| String::from("Utf8Error"))
        } else {
            Ok(String::new())
        }
    }
    pub fn key(record: &Record) -> &[u8] {
        if let Some(record) = record.key() {
            record
        } else {
            &[]
        }
    }
}

foreign_class!(
    /// Carries the data (key and value) for a Record in a Fluvio stream.
    class Record {
        self_type Record;
        private constructor = empty;

        /// The absolute offset in the partition where this Record is located.
        fn Record::offset(&self) -> i64;

        /// The value of this Record as bytes.
        fn Record::value(&self) -> &[u8];

        /// The key of this Record as bytes.
        fn _Record::key(&self) -> &[u8];

        /// The contents of this Record as a String.
        fn _Record::value_string(&self) -> Result<String, String>;

        /// The key of this Record as a String.
        fn _Record::key_string(&self) -> Result<String, String>;
    }
);

#[allow(non_snake_case)]
mod _Offset {
    use super::*;
    pub fn absolute(offset: i64) -> Result<Offset, String> {
        Offset::absolute(offset).map_err(fluvio_error_to_string)
    }
}

foreign_class!(
    /// <p>Describes the position of a record in a Fluvio partition.</p>
    class Offset {
        self_type Offset;
        private constructor = empty;

        /// Create an Offset at a specific absolute position in the partition.
        fn _Offset::absolute(offset: i64) -> Result<Offset, String>;

        /// Create an Offset pointing to the very first record in the partition.
        fn Offset::beginning() -> Offset;

        /// Create an Offset pointing to the record X positions from the beginning of the partition.
        fn Offset::from_beginning(offset: u32) -> Offset;

        /// Create an Offset pointing to the very last record in the partition.
        fn Offset::end() -> Offset;

        /// Create an Offset pointing to the record X positions from the end of the partition.
        fn Offset::from_end(offset: u32) -> Offset;
    }
);

// Not sure how I feel about this but:
// https://github.com/Dushistov/flapigen-rs/issues/143#issuecomment-664131615
foreign_typemap!(
    ($p:r_type) Vec<u8> => jbyteArray {
        let slice = &($p)[..];
        let slice = unsafe { std::mem::transmute::<&[u8], &[i8]>(slice) };
        let raw = JavaByteArray::from_slice_to_raw(slice, env);
        $out = raw;
    };
    ($p:f_type) => "jbyteArray";
);

foreign_typemap!(
    ($p:r_type) &'a [u8] => jbyteArray {
        let slice = unsafe { std::mem::transmute::<&[u8], &[i8]>($p) };
        let raw = JavaByteArray::from_slice_to_raw(slice, env);
        $out = raw;
    };
    ($p:f_type) => "jbyteArray";
    ($p:r_type) &'a [u8] <= jbyteArray {
        let arr = JavaByteArray::new(env, $p);
        let slice = arr.to_slice();
        let slice = unsafe { std::mem::transmute::<&[i8], &[u8]>(slice) };
        $out = slice;
    };
    ($p:f_type) <= "jbyteArray";
);
